snippet readfile "read file"
${1:fh} = open(${2:file path}, "r")
for line in $1:
	line = line.strip()
	# Skip empty lines
	if line == "":
		continue
$1.close()
endsnippet

snippet readfilew "read file with statement"
with open(${1:file path}, 'r') as ${2:fh}:
	for line in $2:
		line = line.strip()
		# Skip empty lines
		if line == "":
			continue
endsnippet

snippet regexeg "regex examples"
regex = re.compile(pattern)
result = regex.search(string)
# Equivalent to
search_result = re.search(pattern, string)

# Common function
# findall(pattern, string): list (empty list if no position)
# search(pattern, string): None if no position else return object. Search matches once.
# for result: group(0): entire match; grou(1) first parenthesized subgroup and so on.

# replace:
# result = re.sub('abc',  'def', input)           # Replace pattern abc -> def
# backrefernces, the whole pattern will be replaced. If want to keep some part, just group it.
# result = re.sub("(\d+) (\w+)", r"\2 \1")
# usually use re.subn to return (new_string, number_of_subs_made).
endsnippet

snippet argparse "argument parse"
import argparse
parser = argparse.ArgumentParser(description='Description of your program')
# args['foo'] is None
parser.add_argument('-f','--foo', help='Description for foo argument', required=True)
parser.add_argument('-b','--bar', help='Description for bar argument', required=True)
# add default='xx' if you want
#parser.add_argument('-b', type=int or float)
# Setting a varable True or False
# args['w'] = False or True
parser.add_argument('-w', action='store_true')
args = vars(parser.parse_args())
# args now is a dict
args['f']
endsnippet

snippet readstdin "read from stdin"
import fileinput
for line in fileinput.input():
	line = line.strip()
	# Skip empty lines
	if line == "":
		continue
# Or
import sys
fh = sys.stdin
endsnippet

snippet  readalllines "read all lines"
# Read and strip lines from file
lines = [line.strip() for line in open(${1:file_path}, 'r').readlines()]
# Skip empty lines
lines = [line for line in lines if line]
endsnippet

snippet  filenote "file note"
"""
Author: Yukun Feng
Date: `date +%m-%d-%y`
Email: yukunfg@gmail.com
Description: ${1:write brief description here}
"""
endsnippet
